#include "static_files/files.hpp"
#include <gzip/decompress.hpp>

#ifdef _WIN32
#define LIBRARY_EXPORTS
#endif

namespace miximus::static_files {
// File: basic_frag.glsl (89 B / 95 B compressed)
	static const uint8_t fileData0[] = {
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x53, 0x2e, 0x4b, 0x2d, 0x2a, 0xce, 0xcc, 0xcf, 0x53, 0x30, 
		0x36, 0x36, 0xe0, 0x2a, 0x4b, 0x2c, 0xaa, 0xcc, 0xcc, 0x4b, 0x57, 0x28, 0x4b, 0x4d, 0x36, 0x56, 0x48, 0xce, 0xcf, 0xc9, 
		0x2f, 0xb2, 0xe6, 0x2a, 0xcb, 0xcf, 0x4c, 0x51, 0x80, 0x81, 0xdc, 0xc4, 0xcc, 0x3c, 0x0d, 0x4d, 0x85, 0x6a, 0x85, 0xf4, 
		0x9c, 0x78, 0xb7, 0xa2, 0xc4, 0x74, 0x67, 0x90, 0x1a, 0x05, 0x5b, 0x90, 0x06, 0x13, 0x0d, 0xb0, 0x06, 0x1d, 0x05, 0x43, 
		0x3d, 0x03, 0x4d, 0x6b, 0x85, 0x5a, 0x00, 0xe7, 0x91, 0xc7, 0xd2, 0x59, 0x00, 0x00, 0x00, 
};

// File: basic_vert.glsl (183 B / 155 B compressed)
	static const uint8_t fileData1[] = {
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x5d, 0x8d, 0x31, 0x0b, 0x83, 0x30, 0x10, 0x85, 0xf7, 0xfb, 
		0x15, 0x0f, 0xba, 0x68, 0x11, 0x49, 0xab, 0x5b, 0x70, 0x72, 0x2e, 0x38, 0x75, 0x2d, 0xd6, 0xa6, 0x72, 0x10, 0x73, 0x10, 
		0x63, 0xa0, 0x94, 0xfe, 0xf7, 0x1a, 0xed, 0xd4, 0x1b, 0xdf, 0xbd, 0xf7, 0x7d, 0x87, 0x68, 0xfc, 0xcc, 0xe2, 0x50, 0x55, 
		0x8a, 0x16, 0xc7, 0x4f, 0xf1, 0x13, 0xa6, 0x3e, 0xd4, 0x00, 0x2e, 0xd7, 0x4e, 0x53, 0x1f, 0x82, 0xe7, 0xfb, 0x12, 0x0c, 
		0xa2, 0x19, 0x2a, 0xc4, 0x56, 0xec, 0x5f, 0x78, 0x46, 0xec, 0x64, 0xd6, 0x14, 0x7b, 0xff, 0x62, 0x37, 0xee, 0x3d, 0x60, 
		0x10, 0x2b, 0x5e, 0x13, 0x45, 0xe1, 0xc7, 0x4a, 0x64, 0x97, 0xe5, 0xf4, 0xa6, 0xf5, 0x81, 0xd1, 0xde, 0xd6, 0x01, 0x87, 
		0xa4, 0x6d, 0x92, 0x05, 0xc7, 0x34, 0xaa, 0xb3, 0xc4, 0x29, 0xa0, 0x4a, 0x55, 0xe0, 0x54, 0xaa, 0x5c, 0x6f, 0xed, 0x8d, 
		0x83, 0xfd, 0x9a, 0x9f, 0xff, 0xf3, 0x05, 0x7c, 0x54, 0xd4, 0x10, 0xb7, 0x00, 0x00, 0x00, 
};

const file_map_t &get_shader_files() {
	static const file_map_t files{
		// File: basic_frag.glsl (89 B / 95 B compressed)
		{ "basic_frag.glsl", {
				{(const char*)fileData0, 95},
				gzip::decompress((const char*)fileData0, 95),
				"false"
			}
		},
		// File: basic_vert.glsl (183 B / 155 B compressed)
		{ "basic_vert.glsl", {
				{(const char*)fileData1, 155},
				gzip::decompress((const char*)fileData1, 155),
				"false"
			}
		},
	};
	return files;
};
} // namespace miximus::static_files
