#ifdef _WIN32
#define LIBRARY_EXPORTS
#endif

#include "static_files/files.hpp"
#include <gzip/decompress.hpp>

namespace miximus::static_files {
// File: basic_frag.glsl (91 B / 96 B compressed)
	static const uint8_t fileData0[] = {
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x53, 0x2e, 0x4b, 0x2d, 0x2a, 0xce, 0xcc, 0xcf, 0x53, 0x30, 
		0x36, 0x36, 0xe0, 0xe5, 0x2a, 0x4b, 0x2c, 0xaa, 0xcc, 0xcc, 0x4b, 0x57, 0x28, 0x4b, 0x4d, 0x36, 0x56, 0x48, 0xce, 0xcf, 
		0xc9, 0x2f, 0xb2, 0x06, 0x0a, 0xe6, 0x67, 0xa6, 0x28, 0xc0, 0x40, 0x6e, 0x62, 0x66, 0x9e, 0x86, 0xa6, 0x42, 0xb5, 0x42, 
		0x7a, 0x4e, 0xbc, 0x5b, 0x51, 0x62, 0xba, 0x33, 0x48, 0x91, 0x82, 0x2d, 0x48, 0x87, 0x89, 0x06, 0x58, 0x87, 0x8e, 0x82, 
		0xa1, 0x9e, 0x81, 0xa6, 0xb5, 0x42, 0x2d, 0x00, 0xb2, 0x40, 0x57, 0xb7, 0x5b, 0x00, 0x00, 0x00, 
};

// File: basic_vert.glsl (193 B / 160 B compressed)
	static const uint8_t fileData1[] = {
		0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0a, 0x5d, 0x8e, 0xbd, 0x0a, 0xc2, 0x30, 0x14, 0x85, 0xf7, 0x40, 
		0xde, 0xe1, 0x80, 0x4b, 0x2b, 0xa5, 0x44, 0xdb, 0xad, 0x74, 0x72, 0x16, 0x3a, 0xb9, 0x4a, 0xac, 0xb1, 0x5c, 0x68, 0x73, 
		0x21, 0x4d, 0x03, 0x22, 0xbe, 0xbb, 0x89, 0xc1, 0xc5, 0x3b, 0x9e, 0x9f, 0xef, 0xdc, 0x5d, 0x30, 0x6e, 0x25, 0xb6, 0x68, 
		0x1a, 0x25, 0xc5, 0x66, 0xe9, 0xc1, 0x6e, 0xc1, 0xa2, 0x7d, 0x0b, 0xe0, 0x7c, 0x19, 0x3a, 0x29, 0xb4, 0xf7, 0x8e, 0x6e, 
		0x9b, 0x37, 0x08, 0x66, 0x6c, 0x10, 0x4e, 0x3c, 0xff, 0xab, 0x47, 0x84, 0x81, 0xd7, 0xa8, 0x06, 0xed, 0x9e, 0x64, 0xa7, 
		0x9c, 0x04, 0x46, 0x9e, 0xd9, 0x45, 0x39, 0x1a, 0x4c, 0xf7, 0x88, 0x25, 0x5b, 0x94, 0x52, 0xbc, 0xa4, 0x88, 0x26, 0xa6, 
		0xf9, 0x1a, 0x5b, 0xe4, 0xd3, 0x7c, 0x9f, 0xc6, 0xb0, 0x4f, 0xc5, 0xb6, 0x48, 0xb0, 0x0a, 0xaa, 0x56, 0x15, 0x0e, 0xb5, 
		0x2a, 0xbb, 0x1c, 0xff, 0xc2, 0x90, 0xaf, 0xff, 0xbd, 0xf1, 0xfe, 0x00, 0x93, 0x2c, 0xf5, 0xed, 0xc1, 0x00, 0x00, 0x00, 
};

file_map_t get_shader_files() {
	file_map_t files{
		// File: basic_frag.glsl (91 B / 96 B compressed)
		{ "basic_frag.glsl", {
				{(const char*)fileData0, 96},
				gzip::decompress((const char*)fileData0, 96),
				"false"
			}
		},
		// File: basic_vert.glsl (193 B / 160 B compressed)
		{ "basic_vert.glsl", {
				{(const char*)fileData1, 160},
				gzip::decompress((const char*)fileData1, 160),
				"false"
			}
		},
	};
	return files;
};
} // namespace miximus::static_files
